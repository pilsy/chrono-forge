name: Node.js Package

on:
  workflow_run:
    workflows: ['Test Suite']
    types:
      - completed
  workflow_dispatch:

jobs:
  version-check:
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      current_version: ${{ steps.current_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Get current version
        id: current_version
        run: |
          current_version=$(node -p "require('./package.json').version")
          echo "version=$current_version" >> $GITHUB_ENV
          echo "::set-output name=version::$current_version"
        shell: bash

      - name: Get last version from Git tags
        id: last_version
        run: |
          git fetch --tags
          last_version=$(git tag --sort=-v:refname | head -n 1 | sed 's/^v//')
          echo "last_version=$last_version" >> $GITHUB_ENV
          echo "::set-output name=last_version::$last_version"
        shell: bash

      - name: Check if version changed
        id: check_version
        run: |
          if [ "${{ steps.current_version.outputs.version }}" != "${{ steps.last_version.outputs.last_version }}" ]; then
            echo "version_changed=true" >> $GITHUB_ENV
            echo "::set-output name=version_changed::true"
          else
            echo "version_changed=false" >> $GITHUB_ENV
            echo "::set-output name=version_changed::false"
          fi

  create-tag:
    if: ${{ needs.version-check.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    needs: version-check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Git for pushing
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: Create Git tag
        env:
          VERSION: ${{ needs.version-check.outputs.current_version }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git tag "v$VERSION"
          git push origin "v$VERSION"
        shell: bash

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
          VERSION: ${{ needs.version-check.outputs.current_version }}
        run: |
          export LAST_VERSION=$(git tag --sort=-v:refname | head -n 2 | tail -n 1 | sed 's/^v//')
          gh release create "v$VERSION" --title "Release $VERSION" --notes "See changes: https://github.com/${{ github.repository }}/compare/v$LAST_VERSION...v$VERSION"

  publish-npm-chrono:
    if: ${{ needs.version-check.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-npm-temporal:
    if: ${{ needs.version-check.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: |
          jq '.name = "temporal-forge"' package.json > temp.json && mv temp.json package.json
          npm run clean
          npm run build
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
